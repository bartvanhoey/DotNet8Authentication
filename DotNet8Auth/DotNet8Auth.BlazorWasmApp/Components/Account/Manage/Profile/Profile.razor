@page "/Account/Manage/Profile"
@using System.ComponentModel.DataAnnotations
@using DotNet8Auth.BlazorWasmApp.Authentication.Profile
@using DotNet8Auth.Shared.Models.Authentication.Profile
@using DotNet8Auth.Shared.Models.Authentication.SetPhoneNumber
@using Microsoft.AspNetCore.Http
@using Microsoft.IdentityModel.Tokens

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IProfileService ProfileService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

<StatusMessage Message="@Message"/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_userName" class="form-control" placeholder="Please choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="phone-number" @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private string _userName = string.Empty;

    private string? Message { get; set; }
    
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userName = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? "";

        if (_userName.IsNullOrEmpty()) return;

        var profile = await ProfileService.GetProfileAsync(_userName);
        Input.PhoneNumber = profile?.PhoneNumber;
        StateHasChanged();
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.PhoneNumber)) return;
        var model = new SetPhoneNumberInputModel { PhoneNumber = Input.PhoneNumber, Email = _userName };
        var profile = await ProfileService.SetPhoneNumberAsync(model);
        Message = "";
        Message = profile.Succeeded ? "Phone number successfully updated" : "Error: Updating phone number went wrong";
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}
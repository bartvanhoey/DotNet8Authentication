@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using DotNet8Auth.Shared.Models.Authentication.ChangePassword
@inject IUserHasPasswordService UserHasPasswordService
@inject IChangePasswordService ChangePasswordService
@inject IIdentityAccessor IdentityAccessor

@* @inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger *@

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@_message" />
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private bool hasPassword;

    [SupplyParameterFromForm]
    private ChangePasswordInputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await UserHasPasswordService.UserHasPasswordAsync();
        if (!result.Succeeded || !result.UserHasPassword){
            // RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
         
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await ChangePasswordService.ChangePasswordAsync(Input);
        if (changePasswordResult.Succeeded)
        {
            _message= $"Your password has been changed";
            return;
        }
        else
        {
            _message= $"Error: {string.Join(",", changePasswordResult?.Errors?.Where(x => x.Description != null).Select(error => error.Description) ?? new List<string>())}";
            return;
        }


        @* var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext); *@
    }


}

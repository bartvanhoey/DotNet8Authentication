@page "/Account/ForgotPassword"
@using DotNet8Auth.Shared.Models.Authentication.ForgotPassword
@using DotNet8Auth.BlazorWasmApp.Authentication.ForgotPassword
@inject NavigationManager NavigationManager
@inject IForgotPasswordService ForgotPasswordService

<PageTitle>Forgot your password?</PageTitle>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <h2>Forgot your password?</h2>
            <hr/>
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email" class="form-label">Enter your email...</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private ForgotPasswordInputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        Input.CallbackUrl = NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri;
            
        var result = await ForgotPasswordService.AskPasswordResetAsync(Input);
        if (result.Succeeded)
        {
            
        }
        // var user = await UserManager.FindByEmailAsync(Input.Email);
        // if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        // {
        //     // Don't reveal that the user does not exist or is not confirmed
        //     RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        // }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        // var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
        //     new Dictionary<string, object?> { ["code"] = code });
        //
        // await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        
        NavigationManager.NavigateTo("/Account/ForgotPasswordConfirmation");
    }

    

}
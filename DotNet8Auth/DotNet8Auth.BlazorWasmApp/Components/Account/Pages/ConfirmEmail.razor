@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IConfirmEmailService ConfirmEmailService

<PageTitle>Confirm email</PageTitle>

<h2>Confirm email</h2>

<div class="row">
    <div class="col-md-12">
        <StatusMessage Message="@Message" />
        <button type="button" class="w-100 btn btn-lg btn-primary" @onclick="ConfirmEmailAsync">Click the button to
            confirm your email address</button>
    </div>
</div>


@code {
    private string? statusMessage;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    public string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            NavigationManager!.NavigateTo("/", false);
        }
    }

    @* var user = await UserManager.FindByIdAsync(UserId);
if (user is null)
{
HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
statusMessage = $"Error loading user with ID {UserId}";
}
else
{
var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
var result = await UserManager.ConfirmEmailAsync(user, code);
statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
} *@
    private async Task ConfirmEmailAsync(MouseEventArgs e)
    {

        if (UserId == null || Code == null)
        {
            Message = "Confirmation went wrong";
            return;
        }

        var result = await ConfirmEmailService.ConfirmEmailAsync(new ConfirmEmailInputModel { UserId = UserId, Code = Code });

        if (result.Succeeded)
        {
            NavigationManager!.NavigateTo("/", false);
        }
        else
        {
            Message = "The system couldn't confirm your email";
        }


    }

}

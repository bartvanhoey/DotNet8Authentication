@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="dropdown">
    <button @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            class="btn btn-secondary dropdown-toggle user-button">
        <PersonFillIcon />
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                  @* <NavLink class="nav-link"  Match="NavLinkMatch.All">Profile</NavLink> *@
                <a href="Account/profile" class="dropdown-item">Profile</a>
                <a href="orders" class="dropdown-item">Orders</a>
                <hr/>
                <AdminMenu/>
                <a class="dropdown-item" @onclick="Logout">Logout</a>
            </Authorized>
            <NotAuthorized>
                <a href="/account/login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
                <a href="/account/register" class="dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool _showUserMenu = false;

    private string UserMenuCssClass => _showUserMenu ? "show-menu" : "";

    private void ToggleUserMenu() => _showUserMenu = !_showUserMenu;

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        _showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/Account/Login");
    }
}